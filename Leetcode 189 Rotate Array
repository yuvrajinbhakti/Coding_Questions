Question Link -> https://leetcode.com/problems/rotate-array/description/


C++ Solution
/*
//Brute Force  TLE in this approach
class Solution {
public:
    void rotate(vector<int>& a, int k) {

while(k--){
//to the right
int n=a.size();
int temp = a[n-1]; //remember last element
for(int i=n-2;i>=0;i--)
{
    a[i+1] = a[i]; //move all element to the right except last one
}
a[0] = temp; //assign remembered value to first element
} 
    }
};

*/




/*
Reversal of array

Reverse the whole array.
Then reverse the first k elements.
Finally reverse the remaining elements.
(Do a dry run, it's very easy to understand)
Time Complexity : O(n)

Space Complexity : O(1)

Code :
*/
class Solution {
public:
    void rotate(vector<int>& nums, int k) {
        k = k%nums.size();
        reverse(nums.begin(), nums.end());
        reverse(nums.begin(), nums.begin()+k);
        reverse(nums.begin()+k, nums.end());
    }
};



// JAVA SOLUTION

// class Solution {
//     public void rotate(int[] nums, int k) {
//         k = k%nums.length;
//         reverse(nums,0,nums.length-1);  //  reverse the entire array
//         reverse(nums,0,k-1);            // reverse first k elements
//         reverse(nums,k,nums.length-1);  // reverse remaining 
//     }

//     private void reverse(int []nums, int start, int end){
//         while(start<end){
//             int temp = nums[start];
//             nums[start]=nums[end];
//             nums[end]=temp;
//             start++;
//             end--;
//         }
//     }
// }


// TLE in this approach
// class Solution {
//     public void rotate(int[] nums, int k) {
//         k = k % nums.length; // Adjust k if it is larger than nums.length
//         int p=1;
//         while (p<=k) {
//             int last = nums[nums.length - 1];
//             for (int i = nums.length - 1; i > 0; i--) {
//                 nums[i] = nums[i - 1];
//             }
//             nums[0] = last;
//             p++;
//         }
//     }
// }

