//LEETCODE QUESTION LINK -> https://leetcode.com/problems/missing-number/description/

//C++ SOLUTION
#include <bits/stdc++.h>
class Solution {
public:
    int missingNumber(vector<int>& nums) {
     sort(nums.begin(),nums.end());
for(int i=0;i<nums.size();i++){
    if(nums[nums.size()-1]!=nums.size()){
        return nums.size();
    }
    else if(nums[i]!=i ){
        return i;
    }
}
return -1;
    }
};

//METHOD 2
class Solution {
public:
    int missingNumber(vector<int>& nums) { // find the missing number in a array
        int sum = 0; // sum of all numbers initially 0
        int total = nums.size()*(nums.size() + 1)/2; // total is the sum of all numbers in the array
        for (auto number : nums) { // iterate through the array
            sum += number; // add the number to the sum
        }
        return total - sum; // return the difference between the sum and the total that is the missing number
    }
};

// JAVA SOLUTION

class Solution {
    public int missingNumber(int[] nums) {
        
        // sort using cyclic sort
        int i=0;
        while(i<nums.length){
            int correct = nums[i];

            if(nums[i] < nums.length && nums[i] != nums[correct]){
                swap(nums, i , correct);
            }else{
                i++;
            }
        }

        //search for missing number
        for(int j=0; j<nums.length; j++){
            if(nums[j] != j){
                return j;
            }
        }

        //case 2
        return nums.length;
    }

    void swap(int[] nums, int first, int second){
        int temp = nums[first];
        nums[first]= nums[second];
        nums[second] = temp;
    }
}
