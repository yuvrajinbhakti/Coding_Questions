//C++ SOLUTION

//BRUTE FORCE (GIVES TLE)
class Solution {
public:
bool isPrime(int n){
for(int i=2;i<n;i++){
    if(n%i==0) return false;
}
return true;
}
    int countPrimes(int n) {
        int cnt=0;
        for(int i=2;i<n;i++){
            if(isPrime(i)){
cnt++;
            }
        }
    return cnt;
    }
};

//METHOD 2
//use sieve of eratosthenes
class Solution {
public:
    int countPrimes(int n) {
        if (n <= 2) return 0;
        vector<bool> isPrime(n, true);
        isPrime[0] = isPrime[1] = false;

        for (int i = 2; i * i < n; i++) {
            if (isPrime[i]) {
                for (int j = i * i; j < n; j += i) {
                    isPrime[j] = false;
                }
            }
        }

        int cnt = 0;
        for (int i = 2; i < n; i++) {
            if (isPrime[i]) {
                cnt++;
            }
        }

        return cnt;
    }
};





//Java Solution

class Solution {
    public int countPrimes(int n) {
        boolean [] prime = new boolean[n];
        // initially every element in array is false
        // false in array means every number is prime
        int count = 0;
        for(int i=2; i < n; i++){
            if(!prime[i]){
                for(int j=i*2; j<n; j+=i){
                    prime[j] = true;
                }
                count++;
            }
        }
        return count;
    }
}

// 2nd approach
class Solution {
    public int countPrimes(int n) {
        if(n<2){
            return 0 ;
        }
        boolean isPrime[] = new boolean[n+1];
        Arrays.fill(isPrime , true);  
        isPrime[0] = false;
        isPrime[1] = false;
        for(int i=2 ; i*i<=n ; i++){
            for(int j = 2*i;j<=n;j+=i){
                isPrime[j] = false;
            }
        }
        int count=0;
        for(int i=0;i<n;i++){
            if(isPrime[i]==true){
                count++;
            }
        }
        return count;
    }
}
        
